{"name":"Ydeliver","tagline":"A .Net focused build and deployment framework","body":"# YDeliver\r\n\r\nYDeliver is a (opinionated) build and deployment framework aimed at .NET projects.\r\n\r\nYDeliver is based on Powershell and the amazing psake framework. It borrows the best practices ( Ydeliver strongly belived in convention over configuration) and tricks from across the industry, with the aim of quickly bootstrapping the build and release process of typical .NET projects. \r\n\r\n## Getting Started\r\n\r\nYou can include YDeliver as submodule within your project (recommended), or just have it as a Powershell module in your machine to invoke builds off.\r\n\r\n```powershell\r\nImport-Module path\\to\\YDeliver\r\n```\r\n\r\nYou can also install YDeliver as a solution-level package using Nuget / Package manager:\r\n\r\n```powershell\r\nInstall-Package ydeliver\r\n```\r\n\r\n## YBuild\r\n\r\nYBuild is the build component of YDeliver. Typically, this component is for compiling, unit testing and packaging your artifacts. YBuild comes with prebuilt tasks to clean and compile your solution, run NUnit tests and package ( zip / nuget) up your artifacts.\r\n\r\nFor example, you can run the clean, compile and package tasks by doing \r\n\r\n```powershell\r\nInvoke-YBuild Clean,Compile,Project\r\n```\r\nTo get a list of available tasks, you can do:\r\n\r\n```powershell\r\nInvoke-YBuild -listAvailable\r\n```\r\n\r\n## Conventions\r\n\r\nYDeliver follows certain conventions, like where to pick up the solution file, how to recognize unit test dlls, etc. These conventions are specified under `Conventions\\Defaults.ps1`\r\n\r\nYou can specify your own, or modify the ones provided by the framework by adding the conventions key in the component config ( like build.yml):\r\n\r\n```yml\r\nconventions:\r\n    framework:  \"3.5x86\"\r\n    solutionFile:   \"$rootDir/name.sln\"\r\n```\r\n\r\n## Custom Tasks\r\n\r\nIf you cannot add your own task directly into the component's task folder ( either because you are using YDeliver as a Nuget package and don't want to touch the installed files, or if your are using YDeliver as a submodule), you can add a file in your project root named `<action>.custom.tasks.ps1` and the tasks from it will be picked up as well.\r\n\r\nFor example, if you want to add custom tasks for YBuild, create a file named `build.custom.tasks.ps1` and place it in the root of your project. These task will now be available from `Invoke-YBuild`.\r\n\r\n## Configuration\r\n\r\nYou can specify configurations like which folders to package into artifacts, which projects to make nuget packages out off etc.\r\n\r\n### build.yml\r\n\r\nSpecifies the configurations for YBuild\r\n\r\n`copyContents` : For specifying files and folders to be copied from one place to another\r\n`packageContents` : For specifying file and folders to be packages into zip files\r\n`nugetSpecs` : For specifying the .nuspec files to be used to build nuget packages\r\n\r\nSample build.yml:\r\n\r\n```yml\r\ncopyContents:\r\n    \"$buildPath/cmd.dll\":   \"$buildPath/Cmd\"\r\n    \"$buildPath/cmd.pdb\":   \"$buildPath/Cmd\"\r\n    \"$buildPath/test\":      \"$buildPath/Cmd\"\r\n\r\npackageContents:\r\n    \"$buildPath/Cmd\":  \"Cmd.zip\"\r\n\r\nnugetSpecs:   [cmd.nuspec]\r\n```\r\n##YFlow\r\n\r\nYFlow is the developer workflow component. During the course of development, the developers would be running specific tasks at specific times. For example, you may want to run the `dbdeploy` task after updating some migrations. You may want to index solr after updating the config etc. Probably, when you run `dbdeploy`, you *also* want to reindex solr. Sometimes, these tasks may also cut across components ( YBuild, YInstall).\r\n\r\nIf you are not using workflows, you may have to do:\r\n\r\n```powershell\r\nInvoke-YBuild dbdeploy\r\nInvoke-YInstall solr\r\n```\r\n\r\nWith `YFlow`, you can define these as your `workflows`. Scaffold the component to get `workflow.ps1` and `workflows.yml`.\r\n\r\n```powershell\r\nInvoke-YScaffold YFlow\r\n```\r\n\r\n`workflow.yml` for the above scenario will look like this:\r\n\r\n```yml\r\nworkflow:\r\n    dbsolr:\r\n        ybuild: [dbdeploy]\r\n        yinstall: [solr]\r\n```\r\n\r\nNow, you can do:\r\n\r\n```powershell\r\nInvoke-YFlow dbsolr #or\r\n.\\workflow.ps1 dbsolr\r\n```\r\n\r\nYou can merge the functionalities of `build.ps1` and `workflow.ps1` as appropriate.\r\n\r\nNote that `YDeliver` doesn't encourage dependencies between task as specified using psake syntax. We believe it is better being explicit. `YFlow` may be the replacement for this.\r\n\r\n## YScaffold\r\n\r\nThis component helps you to quickly bootstrap a project's build and deploy. You can scaffold the files and scripts that are used by the different YDeliver component.\r\n\r\nCurrently, you can scaffold YBuild and YFlow.\r\n\r\n```powershell\r\nInvoke-YScaffold -Component YBuild\r\n```\r\nYScaffold will not replace files that already exist unless called with the `-Force` switch.\r\n\r\n## What's ahead?\r\n\r\nLots more documentation.\r\nBringing in the deploy component.","google":"UA-38743463-1","note":"Don't delete this file! It's used internally to help with page regeneration."}